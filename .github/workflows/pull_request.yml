name: Integration checks
on:
  push:
    branches:
      - master
      - main
  pull_request:

jobs:
  lint-go:
    name: Lint go code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        fdbver: [ "6.2.30", "6.3.15" ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go
      - name: Get dependencies
        run: curl --fail "https://www.foundationdb.org/downloads/${{ matrix.fdbver }}/ubuntu/installers/foundationdb-clients_${{ matrix.fdbver }}-1_amd64.deb" -o fdb.deb
      - name: Install dependencies
        run: sudo dpkg -i fdb.deb
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.31
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # With a new supported Kubernetes version we should adjust the version
        # See https://kubernetes.io/releases for the current releases
        kubever: [ "v1.19.0", "v1.20.0", "v1.21.1" ]
        fdbver: ["6.2.30", "6.3.15"]
    steps:
    - name: Set up Go 1.15
      uses: actions/setup-go@v1
      with:
        go-version: 1.15
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go
    - name: Get dependencies
      env:
        KUBEBUILDER_VER: "2.3.2"
        KUSTOMIZE_VER: "v3.9.4"
        TEST_RACE_CONDITIONS: "1"
        KIND_VER: "v0.11.1"
        YQ_VERSION: "v4.6.1"
      run: |
        # Only download all dependencies
        go get -v -t -d ./...
        curl --fail -sL "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/${KUSTOMIZE_VER}/kustomize_${KUSTOMIZE_VER}_linux_amd64.tar.gz" -o kustomize.tar.gz
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        curl --fail -L "https://go.kubebuilder.io/dl/${KUBEBUILDER_VER}/${os}/${arch}" -o kubebuilder.tar.gz
        curl --fail "https://www.foundationdb.org/downloads/${{ matrix.fdbver }}/ubuntu/installers/foundationdb-clients_${{ matrix.fdbver }}-1_amd64.deb" -o fdb.deb
        curl -Lo kind https://kind.sigs.k8s.io/dl/${KIND_VER}/kind-linux-amd64
        curl -Lo yq.tar.gz https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64.tar.gz
    - name: Install dependencies
      env:
        KUBEBUILDER_VER: "2.3.2"
      run: |
        # Install dependencies either from cache or freshly downloaded
        tar xvfz kustomize.tar.gz
        sudo mv kustomize /usr/local/bin/
        tar -xz -C /tmp/ -f kubebuilder.tar.gz
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        sudo mv "/tmp/kubebuilder_${KUBEBUILDER_VER}_${os}_${arch}" /usr/local/kubebuilder
        sudo dpkg -i fdb.deb
        # Install Kind and start a local Kubernetes cluster
        chmod +x kind
        sudo mv kind /usr/local/bin/kind
        ./scripts/setup_kind_local_registry.sh ${{ matrix.kubever }}
        tar xvfz yq.tar.gz
        sudo mv ./yq_linux_amd64 /usr/bin/yq
    - name: Run tests
      # Currently the default runner has 2 vCPU:
      # https://docs.github.com/en/free-pro-team@latest/actions/reference/specifications-for-github-hosted-runners#supported-runners-and-hardware-resources
      env:
        GOMAXPROCS: "2"
      run: |
        # Ensure the Minio CRD is installed and in place
        kubectl apply -f ./config/minio/operator.yaml
        # Install the current manifests to ensure we can upgrade/apply the manifests without any issue
        kubectl apply -f https://raw.githubusercontent.com/FoundationDB/fdb-kubernetes-operator/master/config/crd/bases/apps.foundationdb.org_foundationdbbackups.yaml
        kubectl apply -f https://raw.githubusercontent.com/FoundationDB/fdb-kubernetes-operator/master/config/crd/bases/apps.foundationdb.org_foundationdbclusters.yaml
        kubectl apply -f https://raw.githubusercontent.com/FoundationDB/fdb-kubernetes-operator/master/config/crd/bases/apps.foundationdb.org_foundationdbrestores.yaml
        # Generate secrets used by the operator
        ./config/test-certs/generate_secrets.bash
        SKIP_TEST=1 IMG=localhost:5000/fdb-kubernetes-operator:latest make clean all docker-build docker-push deploy
        # Wait for the operator to start
        kubectl rollout status deploy fdb-kubernetes-operator-controller-manager --timeout=120s
        # Check if all resources can be applied
        kubectl apply --dry-run=server -f ./config/samples
        RUN_E2E=true make test
        # Change the image back to the default otherwise the next check will complain
        cd config/manager && kustomize edit set image controller=fdb-kubernetes-operator:latest
    - name: Check for uncommitted changes
      run: git diff --exit-code
  push_images:
    if: github.ref == 'refs/heads/master'
    needs: build
    name: Push Docker images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - fdb-kubernetes-operator
          - fdb-data-loader
        include:
          - image: fdb-kubernetes-operator
            context: ./
            name: foundationdb/fdb-kubernetes-operator
          - image: fdb-data-loader
            context: ./sample-apps/data-loader
            name: foundationdb/fdb-data-loader
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ${{ matrix.context }}
          tags: ${{ matrix.name }}:latest
