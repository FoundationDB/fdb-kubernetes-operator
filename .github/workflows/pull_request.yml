name: Pull Request Checks
on: [pull_request]
jobs:
  lint-go:
    name: Lint go code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go
      - uses: actions/cache@v2
        id: fdb_cache
        with:
          path: |
            fdb.deb
          key: ${{ runner.os }}-${{ hashFiles('fdb.deb') }}
          restore-keys: |
            ${{ runner.os }}-fdb
      - name: Get dependencies
        if: steps.fdb_cache.outputs.cache-hit != 'true'
        env:
          FDB_VER: "6.2.29"
        run: |
          curl --cacert ./foundationdb-kubernetes-sidecar/files/GeoTrust_Global_CA.pem \
               --fail "https://www.foundationdb.org/downloads/${FDB_VER}/ubuntu/installers/foundationdb-clients_${FDB_VER}-1_amd64.deb" -o fdb.deb
      - name: Install dependencies
        run: sudo dpkg -i fdb.deb
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.31
  lint-python:
    name: Lint Python code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          architecture: 'x64'
      - uses: actions/cache@v2
        with:
          path: .cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('./foundationdb-kubernetes-sidecar/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Get Python dependencies
        run: |
          python3 -m pip install -r ./foundationdb-kubernetes-sidecar/requirements.txt
          python3 -m pip install black==20.8b1
          python3 -m pip install pycodestyle==2.6.0
      - name: Run Python lint
        run: |
          pycodestyle --max-line-length=120 ./**/*.py
          black --check --diff ./
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # With a new supported Kubernetes version we should adjust the version
        kubever: [ "v1.17.0", "v1.18.0", "v1.19.0", "v1.20.0" ]
    steps:
    - name: Set up Go 1.15
      uses: actions/setup-go@v1
      with:
        go-version: 1.15
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go
    # - uses: actions/cache@v2
    #   id: dependency_cache
    #   with:
    #     path: |
    #       kustomize.tar.gz
    #       fdb.deb
    #       kubebuilder.tar.gz
    #       kind
    #     key: ${{ runner.os }}-${{ hashFiles('kustomize.tar.gz', 'fdb.deb', 'kubebuilder.tar.gz', 'kind') }}
    #     restore-keys: |
    #       ${{ runner.os }}-dependencies
    - name: Get dependencies
      # if: steps.dependency_cache.outputs.cache-hit != 'true'
      env:
        KUBEBUILDER_VER: "2.2.0"
        KUSTOMIZE_VER: "v3.9.4"
        TEST_RACE_CONDITIONS: "1"
        FDB_VER: "6.2.29"
        KIND_VER: "v0.10.0"
      run: |
        # Only download all dependencies
        go get -v -t -d ./...
        curl --fail -sL "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/${KUSTOMIZE_VER}/kustomize_${KUSTOMIZE_VER}_linux_amd64.tar.gz" -o kustomize.tar.gz
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        curl --fail -L "https://go.kubebuilder.io/dl/${KUBEBUILDER_VER}/${os}/${arch}" -o kubebuilder.tar.gz
        curl --cacert ./foundationdb-kubernetes-sidecar/files/GeoTrust_Global_CA.pem \
             --fail "https://www.foundationdb.org/downloads/${FDB_VER}/ubuntu/installers/foundationdb-clients_${FDB_VER}-1_amd64.deb" -o fdb.deb
        curl -Lo kind https://kind.sigs.k8s.io/dl/${KIND_VER}/kind-linux-amd64
    - name: Install dependencies
      env:
        KUBEBUILDER_VER: "2.2.0"
      run: |
        # Install dependencies either from cache or freshly downloaded
        tar xvfz kustomize.tar.gz
        sudo mv kustomize /usr/local/bin/
        tar -xz -C /tmp/ -f kubebuilder.tar.gz
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        sudo mv "/tmp/kubebuilder_${KUBEBUILDER_VER}_${os}_${arch}" /usr/local/kubebuilder
        sudo dpkg -i fdb.deb
        # Install Kind and start a local Kubernetes cluster
        chmod +x kind
        sudo mv kind /usr/local/bin/kind
        ./scripts/setup_kind_local_registry.sh ${{ matrix.kubever }}
    - name: Run tests
      # Currently the default runner has 2 vCPU:
      # https://docs.github.com/en/free-pro-team@latest/actions/reference/specifications-for-github-hosted-runners#supported-runners-and-hardware-resources
      env:
        GOMAXPROCS: "2"
      run: |
        # Ensure the Minio CRD is installed and in place
        kubectl apply -f ./config/minio/operator.yaml
        ./config/test-certs/generate_secrets.bash
        IMG=localhost:5000/fdb-kubernetes-operator:latest make clean all docker-build docker-push deploy
        # Wait for the operator to start
        kubectl rollout status deploy fdb-kubernetes-operator-controller-manager --timeout=120s
        # Check if all resources can be applied
        kubectl apply --dry-run=server -f ./config/samples
        # TODO run some e2e tests e.g. create cluster/delete cluster
        # kubectl apply -f ./config/samples/cluster_local.yaml
        # Change the image back to the default otherwise the next check will complain
        # TODO: changes should be ignored here e.g. template file.
        cd config/manager && kustomize edit set image controller=fdb-kubernetes-operator:latest
    - name: Check for uncommitted changes
      run: git diff --exit-code
